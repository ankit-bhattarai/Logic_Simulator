# Description of EBNF Syntax for describing the configuration of a logic circuit
# Comments are denoted by a hash symbol '#' and end of lines are denoted by a semi-colon ';'
#TODO: The code has to be made modular, which means that the EBNF must itself also be modular and be able to be split into different components which all work together


# Descriping the basics for EBNF
letters = 'a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j'|'k'|'l'|'m'|'n'|'o'|'p'|'q'|'r'|'s'|'t'|'u'|'v'|'w'|'x'|'y'|'z';
bool_digits = '0'|'1';
non_zero_digits = '1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9';
digits = '0'|non_zero_digits;
integer = non_zero_digits, {digits};
alpha_numeric_word = letters, {letters|digits|'_'};

# Describing devices - There must always be at least one device
devices = "DEVICES:", device, {',', device}, ';';
device = CLOCK|SWITCH|AND|NAND|OR|NOR|DTYPE|XOR;
CLOCK = "CLOCK", device_name, clock_speed;
device_name = alpha_numeric_word;
clock_speed = integer;
SWITCH = "SWITCH", device_name, switch_state;
switch_state = bool_digits;
AND = "AND", device_name, number_inputs;
number_inputs = non_zero_digits|'10'|'11'|'12'|'13'|'14'|'15'|'16';
NAND = "NAND", device_name, number_inputs;
OR = "OR", device_name, number_inputs;
NOR = "NOR", device_name, number_inputs;
DTYPE = "DTYPE", device_name;
XOR = "XOR", device_name;

# Describing connections
connections = "CONNECT:", connection, {',', connection}, ';';
connection = device_name,['.', output],'->', device_name,['.', input];
output = 'Q'|'QBAR';
input = input_pin|'DATA'|'CLK'|'SET'|'CLEAR'; 
input_pin = 'I',number_inputs;

# Describing monitors
monitors = "MONITOR:", monitor, {',', monitor}, ';';
monitor = device_name,['.', output];

#Describing overall logic circuit
circuit = devices, connections, monitors, "END;";

#TODO: Check that the following is correct
# An example of having a clock, switch and an AND gate is:
# DEVICES: CLOCK clock1 10, SWITCH switch1 0, AND and1 2;
# CONNECT: switch1 -> and1.I1, clock1 -> and1.I2;
# MONITOR: and1;
# END;